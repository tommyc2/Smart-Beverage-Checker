#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/10d3a683-76c4-46fc-9c45-bd4dfa123a3d

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String messageIndicator;
  float temp;
  float thresholdValue;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include <OneWire.h>
#include <DallasTemperature.h>
#include "thingProperties.h"

#define ONE_WIRE_BUS 4

WiFiClient client;

OneWire oneWire(ONE_WIRE_BUS);

DallasTemperature sensors(&oneWire);

// Defining LED Pins
int hotLedPin = 6;
int goneColdLedPin = 8;
int tempJustFineLedPin = 1;

String lastMessage = "";

void setup() {

  Serial.begin(9600);

  delay(1500);

  //Initiating Sensors for use & Setting pins as output
  sensors.begin();
  pinMode(hotLedPin, OUTPUT);
  pinMode(goneColdLedPin, OUTPUT);
  pinMode(tempJustFineLedPin, OUTPUT);

  initProperties();


  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}


// Loop Method
void loop() {
  ArduinoCloud.update();
  
  sensors.requestTemperatures();

  temp = sensors.getTempCByIndex(0);

  Serial.println(sensors.getDeviceCount());

  // Test purposes on serial monitor
  Serial.print("Celsius temperature: ");
  Serial.println(temp);

  Serial.print('\n');

  // If temperature above threshold, turn on red LED only
  if (temp >= thresholdValue) {
    digitalWrite(hotLedPin, HIGH);
    digitalWrite(goneColdLedPin, LOW);
    digitalWrite(tempJustFineLedPin,LOW);
    messageIndicator = "Your beverage is piping hot! Be careful!";
    Serial.print(messageIndicator);
    
    if (messageIndicator != lastMessage){
      iftttSend();
    }
    lastMessage = messageIndicator;
    
    }
  

  // If temperature is between a hot range of 50 to threshold for example, then turn on yellow LED
  else if ((temp >= thresholdValue-7) && (temp < thresholdValue)){
    digitalWrite(goneColdLedPin, LOW);
    digitalWrite(hotLedPin, LOW);
    digitalWrite(tempJustFineLedPin,HIGH);
    messageIndicator = "Your beverage is just fine.";
    Serial.print(messageIndicator);
    if (messageIndicator != lastMessage){
      iftttSend();
    }
    lastMessage = messageIndicator;
    }


  // Otherwise, turn on blue LED only
  else {
    digitalWrite(goneColdLedPin, HIGH);
    digitalWrite(hotLedPin, LOW);
    digitalWrite(tempJustFineLedPin,LOW);
    messageIndicator = "Your beverage is getting cold! Heat it up!!";
    Serial.print(messageIndicator);
    if (messageIndicator != lastMessage){
      iftttSend();
    }
    lastMessage = messageIndicator;
  }


  // Delay
  delay(1000);

}


//---------------------------- //
// ----- IFTTT Function ------ //
//---------------------------- //
void iftttSend() {

char server[] = "maker.ifttt.com";
Serial.println("Alarm triggered !");
  
// Connection to the server IFTTT
  Serial.println("Starting connection to server...");
  if (client.connectSSL(server,443)) {
    Serial.println("Connected to server IFTTT, ready to trigger alarm...");
    // Make a HTTP request:
    client.println("GET /trigger/TooCold/with/key/dkxBdXi0w4WsBYOWZEO7jQ HTTP/1.1");
    client.println("Host: maker.ifttt.com");
    client.println();
    Serial.println("IFTTT alarm triggered!");
  }
  else {
    Serial.println("Connection at IFTTT failed");
  }
  
 }


void onThresholdValueChange()  {
// dummy method to keep editor happy
}

void onTempChange()  {
// dummy method to keep editor happy
}


void onMessageIndicatorChange()  {
// dummy method to keep editor happy
}





